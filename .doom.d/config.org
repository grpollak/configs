#+TITLE: My Emacs Config
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Georg R. Pollak" user-mail-address "pollakgeorg@gmail.com")
#+END_SRC

#+RESULTS:
: pollakgeorg@gmail.com

Starts the Emacs server
;; (server-start)

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
* Baisc Setup
** Go TO File
#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "~/.doom.d/lisp/general/open-file-at-cursor-immediate-done.el"))
(with-eval-after-load 'evil-maps
  (define-key evil-visual-state-map (kbd "g f") 'open-file-at-cursor-immediate-done)
  (define-key evil-normal-state-map (kbd "g f") 'open-file-at-cursor-immediate-done)
)
#+END_SRC

#+RESULTS:
: open-file-at-cursor-immediate-done

** Set default mode for scatch buffer
+ set mode of scratch buffer to org mode
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

* Evil
#+BEGIN_SRC emacs-lisp
(after! evil-snipe (evil-snipe-mode -1))
#+END_SRC

* Completion
** Helm
*** Describes keybindings of current mode
#+BEGIN_SRC emacs-lisp
(use-package! helm-descbinds
  :hook (helm-mode . helm-descbinds-mode)
  :bind (
         ("C-h b" . helm-descbinds)
        )
)
#+END_SRC

#+RESULTS:
: helm-descbinds

** Ivy
https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/

* Themes
    There are two ways to load a theme. Both assume the theme is installed and
    available. You can either set ~doom-theme~ or manually load a theme with the
    ~load-theme~ function.
    #+BEGIN_SRC emacs-lisp
    ;; (setq doom-theme 'doom-one)
    (load-theme 'sanityinc-tomorrow-eighties t)
    #+END_SRC


** TODO Themes: clean up add conditional lisp variable
# ,#+BEGIN_SRC emacs-lisp
# ;; (setq doom-theme 'doom-one)
#        ;; (use-package moe-theme                     ; Theme
#        ;; :ensure t
#        ;; :config
#        ;; (load-theme 'moe-dark t))
#         ;(use-package zenburn-theme
#         ;:ensure t
#         ;:config
#         ;(load-theme 'zenburn t))
#         ;(use-package tangotango-theme
#         ;:ensure t)
#          ;; (load-theme 'sanityinc-tomorrow-day t))
#      ;;  (use-package material-theme
#      ;;       :ensure t
#      ;;       :init
#      ;;
#      ;; (load-theme 'material t))
#           ;(use-package ample-theme
#           ;:init (progn (load-theme 'ample t t)
#           ;            (load-theme 'ample-flat t t)
#           ;            (load-theme 'ample-light t t)
#           ;            (enable-theme 'ample-flat))
#           ;:defer t
#           ;:ensure t)
#           ;; (use-package farmhouse-theme
#           ;;  :ensure t
#           ;;  :init
#           ;;     (load-theme 'farmhouse-dark t))
# #+END_SRC
* Font
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
    They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
    font string. You generally only need these two:
   #+BEGIN_SRC emacs-lisp
    ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
    ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
   #+END_SRC

   #+RESULTS:
   : #<font-spec nil nil sans nil nil nil nil nil 13 nil nil nil nil>

* Line Number
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'rel)
#+END_SRC

#+RESULTS:
: rel
* C++
** Compiler Explorer - RMSbolt
    
* Org
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files (list "~/org" "~/.doom.d/"))
#+END_SRC

#+RESULTS:
| ~/org | ~/.doom.d/ |

* LaTeX
** AUCTEX
Helper function that can be used inside dir-locals.el to query master file automatically
#+BEGIN_SRC emacs-lisp
(defun get-tex-master ()
  "Sets the Tex-Master to projectile-project-root/formulary.tex"
  ;; (setq TeX-master)
  (concat (projectile-project-root) "formulary.tex")
)
#+END_SRC

#+RESULTS:
: get-tex-master
#+BEGIN_SRC emacs-lisp
(setq LaTeX-indent-level 2)
(use-package tex
    :config (setq-default TeX-master nil))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24545 41313 98706 300000) :init (24545 41313 98700 226000) :config (24545 41313 98684 574000) :config-secs (0 0 10 941000) :init-secs (0 0 71 626000) :use-package-secs (0 0 80 952000)))

** Basic Configurations
#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(evince))
#+END_SRC

#+RESULTS:
| evince |

** px - preview LaTeX in any mode
#+BEGIN_SRC emacs-lisp
(use-package px)
#+END_SRC

#+RESULTS:
: px

** Yassnippet
*** Helper Functions
**** Automatic Label Creation for Theorems
TODO finish this sometime
#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "~/.doom.d/lisp/latex/labelcreation.el"))
#+END_SRC

#+RESULTS:
: t

* COMMENT Mail
Each path is relative to `+mu4e-mu4e-mail-path',
which is [[file:~/.mail/][~/.mail]] by default To send mails we need to configure ~smtp~
** ETH Mail
#+BEGIN_SRC emacs-lisp
(set-email-account! "ETH"
  '((mu4e-sent-folder       . "/eth/Sent")
    (mu4e-drafts-folder     . "/eth/Drafts")
    (mu4e-trash-folder      . "/eth/Trash")
    ;; TODO (mu4e-refile-folder     . "/gmail/[Gmail]")
    (smtpmail-smtp-user     . "pollakg@student.ethz.ch")
    (user-mail-address      . "pollakg@student.ethz.ch")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "---\nGeorg R. Pollak"))
  t)
(setq mu4e-view-show-images t)          ;
#+END_SRC

#+RESULTS:
: t
* Python
** Documentation
*** Sphinx
#+BEGIN_SRC emacs-lisp
(use-package sphinx-doc
:bind (:map sphinx-doc-mode-map
            ("SPC C-d" . sphinx-doc))
)
#+END_SRC
** ELPY - Emacs Lisp Python Environment
Emacs Lisp Python Environment
#+BEGIN_SRC emacs-lisp
(use-package elpy
:config
    (progn (elpy-enable)
        (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
        (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    )
)
;; TODO:  (add-hook 'python-mode-hook 'jedi:setup)
;(setq python-shell-interpreter "ipython5" python-shell-interpreter-args "--simple-prompt --pprint")
;(elpy-use-ipython) #+END_SRC #+RESULTS: : /usr/local/anaconda3/bin/anaconda ** EPC
;;Requirement for Jedi
;#+BEGIN_SRC emacs-lisp
;(use-package epc ;:defer t)
;(setq jedi:server-command '("/Users/pollakg/.emacs.d/elpa/jedi-core-20170121.610/jediepcserver.py"))
#+END_SRC

